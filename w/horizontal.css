html,
body {
  width: 100%;
  height:100%;
  margin: 0;
  padding: 0;
}

.wrap {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;       /* This is so we can position our slides absolutely off screen and we won't get any horizontal scroll bars */
  background: #120103;
  color: #fff;
  text-align: center;
}

header {
  background: rgb(255,255,254);
  box-shadow: 0px 0px 1em 0.2em snow;
  position: absolute;    /* We position it absolutely to the top-left corner */
  top: 0;
  left: 0;
  z-index: 900;   /*And give it a z-index of 900 so that we are sure that's on top of the rest of the content.*/
  width: 100%;
}

header label {
  color:skyblue;
  cursor: pointer;
  display: inline-block;   /* This way our labels will be side-by-side and centered in the middle of our header. Inline-block also allows for our line-height to be respected */
  line-height: 4.25em;    /* This gives us a larger clickable area*/
  font-size: .887em;
  font-weight: bold;
  padding: 0 1em;
	border: hotpink;
	
}

header label:hover {
  background: aliceblue;
	border-bottom: 2px solid pink;
}

.slide {
  width: 100%;
  height: 100%;
  position:absolute;
  top: 0;
  left: 100%;     /* With these styles, we are pushing all of our slides off to the side of the window. */
  z-index: 10;
  padding: 8em 1em 0;
  background-color: #120103;
  background-position: 50% 50%;
  background-size:cover;     /* now our images fill up the entire slide */
  transition: left 0s .75s;   /* duration to 0.  delay it by 0.75 seconds. So these transition styles have the new slide coming in and afterwards our old slides, slides back out.*/
}



.slide-one {
  background: url("下载 (2).png");

}
.slide-two {
  background-color:silver;
background-image: 
radial-gradient(circle at 100% 150%, silver 24%, white 25%, white 28%, silver 29%, silver 36%, white 36%, white 40%, transparent 40%, transparent),
radial-gradient(circle at 0    150%, silver 24%, white 25%, white 28%, silver 29%, silver 36%, white 36%, white 40%, transparent 40%, transparent),
radial-gradient(circle at 50%  100%, white 10%, silver 11%, silver 23%, white 24%, white 30%, silver 31%, silver 43%, white 44%, white 50%, silver 51%, silver 63%, white 64%, white 71%, transparent 71%, transparent),
radial-gradient(circle at 100% 50%, white 5%, silver 6%, silver 15%, white 16%, white 20%, silver 21%, silver 30%, white 31%, white 35%, silver 36%, silver 45%, white 46%, white 49%, transparent 50%, transparent),
radial-gradient(circle at 0    50%, white 5%, silver 6%, silver 15%, white 16%, white 20%, silver 21%, silver 30%, white 31%, white 35%, silver 36%, silver 45%, white 46%, white 49%, transparent 50%, transparent);
background-size:100px 50px;
}
.slide-three {
  background-color:black;
background-image:
radial-gradient(white, rgba(255,255,255,.2) 2px, transparent 40px),
radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 30px),
radial-gradient(white, rgba(255,255,255,.1) 2px, transparent 40px),
radial-gradient(rgba(255,255,255,.4), rgba(255,255,255,.1) 2px, transparent 30px);
background-size: 550px 550px, 350px 350px, 250px 250px, 150px 150px; 
	background-position: 0 0, 40px 60px, 130px 270px, 70px 100px;}
.slide-four {
  background: url('pattern/cute 2.jpg');
}
.slide-five{
	background-repeat: repeat;
	background: url('pattern (2).png');
}
.slide-six{
	background:url("pattern (3).png");
}

/* So all that is left to do is to target this text state.
We are going to use an attribute selector to select any input that has an ID that starts with slide.
Then we will further qualify the selector by adding the pseudo-class of "checked" */

/* This will target any of our radio inputs as they all begin with "slide" Then by using the adjacent sibling combinator which is the "+" sign, we can finally target our slide.*/

[id^="slide"]:checked + .slide {
  left: 0;       /* When our radio element is checked, we want to position our slide back on the left corner of our wrapper, so we will set left to zero */
  z-index: 100;   /* we wanna raise the z-index to 100, to be sure our slide is on top of the previous one. */
  transition: left .65s ease-out;
}



.slide h1 {
  opacity: 0;
  transform: translateY(100%);
  transition: transform .5s .5s, opacity .5s;    /* This transition will allow us to see the opacity go down to zero, but it will delay the transform until the next slide is already covering it.*/
}

[id^="slide"]:checked + .slide h1 {  /* Now we target our headline when our input is in its checked state */
  opacity: 1;
  transform: translateY(0);
  transition: all .5s .5s;   /* This will have our headline appearing and rising as the slide is coming onto the screen. */
}




